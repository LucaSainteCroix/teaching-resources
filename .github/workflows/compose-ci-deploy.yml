# .github/workflows/deploy.yml

name: Push docker-compose Flask App + MySQL DB to Docker Hub

on:
  workflow_dispatch: # Triggers workflow manually
  push:
    paths:
      - 'Ressources/Outils_Dev/Flask/flask_exercises/**'   # Only run this workflow if there's a change in flask_exercises folder


jobs:
  build-and-push:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: "/home/runner/work/teaching-resources/teaching-resources/Ressources/Outils_dev/Flask/flask_exercises/"

    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Python (optional, required if you do Python-based steps)
        uses: actions/setup-python@v3
        with:
          python-version: '3.10'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pipenv
          pipenv install --system --deploy

      - name: Install Docker Compose (if not already installed)
        run: sudo apt-get update && sudo apt-get install -y docker-compose

      - name: Create environment file
        run: |
          echo "Creating .env file..."
          touch .docker-env
          echo '"$MYSQL_ROOT_PASSWORD" > .docker-env'
          echo '"$MYSQL_DATABASE" > .docker-env'
          echo "Environment file created. Structure:"
          cat .docker-env
        env:
          MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}
          MYSQL_DATABASE: ${{ secrets.MYSQL_DATABASE }}

      # The following step is optional if you just want to build and then push to a registry
      # or deploy somewhere else. This starts the containers in the GitHub runner for testing.
      - name: Build and spin up containers for testing
        run: |
          echo "Starting docker-compose build..."
          docker-compose -f docker-compose.prod.yml --env-file .docker-env \
          build --no-cache || echo "Build failed with exit code $?"

          echo "Starting docker-compose up..."
          docker-compose -f docker-compose.prod.yml --env-file .docker-env \
          up -d || echo "Up failed with exit code $?"

          echo "Waiting for containers to be healthy..."
          timeout 60 bash -c 'until docker-compose ps | grep -q "Up"; do sleep 1; done'

          echo "Checking container status..."
          docker ps -a
          docker logs my_flask_app_prod --since=1h
          docker logs my_db --since=1h

          echo "Checking container logs..."
          docker-compose -f docker-compose.prod.yml logs

          echo "Final container status:"
          docker ps

          echo "Network status:"
          docker network ls

          echo "Testing Flask app..."
          # timeout 60 bash -c 'while [[ "$(curl -s http://localhost:80/health | grep -c \"status\":\"healthy\")" != "1" ]]; do sleep 1; done'
          docker-compose exec -T my_flask_app_prod pytest || echo "Tests failed with exit code $?"

      # (Optional) If you want to push images to a registry like DockerHub, do it here.
      # You need to set up secrets DOCKERHUB_USERNAME and DOCKERHUB_PASSWORD in your repo settings.
      - name: Log in to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Push Docker images to registry
        run: |
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/flask_example_repo:flask_app
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/flask_example_repo:mysql_db

      # Additional steps for actual deployment to a server/cloud can go here.
      # For example, SSH to a remote host or use a cloud deployment action/service.
